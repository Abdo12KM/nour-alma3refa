---
description: 
globs: 
alwaysApply: true
---
# Project: Nour al-Ma'rifa - Custom AI Instructions

## 1. Core Context Comprehension:
   - **ALWAYS** begin by thoroughly reading and understanding the following documents to grasp the complete project context before generating code, making technical decisions, or answering questions:
     - `PROJECT_DESCR.md`: For the overall project vision, detailed requirements, features (MVP and future), target audience, technology stack, architecture, design principles, and specific workflows (like the Arabic Letter "Ø¨" lesson design). This is the primary source of truth for "what" and "why".
     - `PROGRESS.md`: To understand the current development status, already implemented features, and any noted implementation details or challenges. This helps avoid re-implementing work or suggesting things already decided against.
     - `PROMPTS.md`: For the structured, sequential development plan. This outlines the "how" and the order of tasks.

## 2. Development and Coding Workflow:
   - When a task based on an entry in `PROMPTS.md` is requested:
     - Focus **exclusively** on fulfilling the requirements of that specific prompt.
     - Ensure all generated code and solutions are **fully consistent** with the technology stack (Next.js 14+ App Router, TypeScript, Tailwind CSS, Shadcn UI, Drizzle ORM with PostgreSQL, EGTTS V0.1, Google Gemini API) and the UI/UX design principles (voice-first, accessibility, simplicity, cultural relevance) detailed in `PROJECT_DESCR.md`.
     - For any database-related tasks, refer to the schema details in `PROJECT_DESCR.md` (Section 5 and any implicit schema details in feature descriptions) and any existing Drizzle schema files (e.g., `src/lib/db/schema.ts` if created). Adhere strictly to Drizzle ORM practices.

## 3. Documentation and Progress Updates:
   - After successfully implementing a significant feature or completing a milestone outlined in `PROMPTS.md`:
     - **Proactively suggest an update to `PROGRESS.md`**. This should include marking the relevant task(s) as complete (e.g., changing ðŸ”² to âœ…) and adding brief, relevant notes about the implementation or any key decisions made.
     - If database schema modifications were part of the task, ensure these changes are accurately reflected in Drizzle schema files and consider if a note in `PROGRESS.md` or `PROJECT_DESCR.md` is necessary for clarity.

## 4. Code Quality and Adherence to Standards:
   - Generate code that is modular, clean, well-commented (where non-obvious), and follows established best practices for the specified technologies.
   - **Always use `pnpm`** for package management commands, as per standing project instructions.

## 5. Clarification and Verification:
   - If a user request is ambiguous, appears to conflict with the established information in `PROJECT_DESCR.md`, `PROGRESS.md`, or `PROMPTS.md`, or seems to deviate significantly from the planned development path:
     - **Seek clarification** from the user before proceeding with implementation.
     - Briefly explain the perceived conflict or ambiguity by referencing the relevant document.

## 6. Learning and Adaptation:
   - Treat the `PROJECT_DESCR.md`, `PROGRESS.md`, and `PROMPTS.md` files as your primary "memory bank" for this project, similar to the "Cline Memory Bank" concept discussed in the Reddit threads.

   - Pay attention to user feedback on previously generated code or suggestions to improve future responses.